6.1.1 입력 프로퍼티와 출력 프로퍼티
Angular 컴포넌트가 데이터를 입력받아 결과를 출력하는 블랙박스라고 하자.
 - 입력을 받는 프로퍼티
 - 결과를 출력하는 프로퍼티

자식 컴포넌트에서 @Input어노테이션으로 값을 받아옴
부모 컴포넌트에서는 애트리뷰트로 [stockSymbol]="stock" quantity="100" 이런식으로 자식으로 값을 알려줌

입력 프로퍼티의 값이 변경되는 시점을 가로채려면?
 - setter, getter 사용

ActivatedRoute를 사용할 때는 생성자 함수에 인자로 전달.
@Input을 사용하면 두 컴포넌트가 부모,자식 관계이고 생성자를 통하지 않고 직접 바인딩할 수 있다.

[출력 프로퍼티와 커스텀 이벤트]
@Output 어노테이션
(자식) @Output() lastPrice
(부모) template : '<price-quoter (lastPrice)="priceQuoteHandler($event)"></price-quoter>'

[이벤트 버블링 (Event bubbling)]
Angular는 이벤트 버블링을 지원하지 않는다.
last-price 이벤트가 발생한 컴포넌트의 부모 계층(<div>)에서는 이벤트를 받을 수 없다.
---------------------------
<div (lastPrice)="priceQuoteHandler($event)">
	<price-quoter></price-quoter>
</div>
---------------------------

꼭 버블링이 필요하면, EventEmitter를 쓰지말고, PriceQuoterComponent를 구현해라~!


6.1.2 중개자 패턴
각 컴포넌트는 독립적이고, 다른 컴포넌트를 최대한 신경쓰지 않는 것이 좋다!
중개자 : 컴포넌트들을 잘 조합해서 원하는 동작을 하게 하는 것!
	 한 컴포넌트에서 데이터를 받아 다른 컴포넌트에 전달
여기서는 서로 이웃한 컴포넌트가 부모를 중개자로 사용하는 방법을 공부함!

6.1.3 프로젝션
Angular는 부모 컴포넌트 템플릿의 일부분을 자식 컴포넌트 템플릿에 넣을 수 있다.
ngContent 디렉티브 사용
AngularJS에서는 트랜스클루전(transclusion)이라고 했고, 지금은 프로젝션(Projection)으로 변경되었다.
1. 자식 컴포넌트 템플릿에 <ng-content> 태그를 추가해서 부모 컴포넌트가 보내는 템플릿이 위치할 곳 지정
2. 자식 컴포넌트를 표현하는 태그가 <my-child>라면 <my-child> 태그 안쪽에 있는 <div> 태그가 자식 컴포넌트로 전달된다.
부모 컴포넌트에서 정의하지만 자식 컴포넌트에서 렌더링한다.

[여러 구역에 프로젝션하기]
select="클래스이름"
이렇게 하면된다~!
