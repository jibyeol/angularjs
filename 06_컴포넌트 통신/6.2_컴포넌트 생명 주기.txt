Angular 컴포넌트는 생명주기를 거치는동안 많은 이벤트 발생
(순서)
컴포넌트 생성
Angular 변화 감지기가 컴포넌트 모니터링
컴포넌트 초기화
DOM에 추가
사용자가 볼 수 있게 렌더링
컴포넌트 상태나 내부의 프로퍼티 값이 변경되면 UI를 다시 렌더링
컴포넌트 종료

컴포넌트 생성
 - constructor()
 - ngOnChanges() or DoCheck()
 - ngOnInit()
 - ngAfterContentInit()
 - ngAfterContentChecked() <--> 변화감지의 ngAfterContentChecked() / ngAfterViewChecked()
 - ngAfterViewInit()
 - ngAfterViewChecked()
컴포넌트 종료
 - ngOnDestroy()
변화감지
 - ngOnChanges() or DoCheck()
 - ngAfterContentChecked()
 - ngAfterViewChecked()

컴포넌트의 생명주기를 가로채서 원하는 동작을 하려면?
 - ngOnChanges() : 부모 -> 자식 입력 프로퍼티로 바인딩된 값이 변경, 초기화될 때 실행.
		   입력 프로퍼티가 없으면 실행되지 X
		   변화 감지 알고리즘 만드록 싶을 경우 이 알고리즘 DoCheck() 함수로 구현할 수 있지만, 모든 변화 감지 사이클마다 DoCheck() 함수를 실행하기 때문에 성능에 나쁜 영향을 줄 수 있다.
 - ngOnInit() : 프로퍼티 값을 초기화하려고 ngOnChanges()가 실행된 뒤에 실행
		생성자에서 변수를 초기화해도 프로퍼티들이 생성되지 않지만, ngOnInit()이 실행되는 시점은 컴포넌트 프로퍼티들이 생성되어 초기화되고 난 이후다.
 - ngAfterContentInit() : ngContent 디렉티브를 사용해서 자식 컴포넌트에 HTML 조각을 전달하면, 자식 컴포넌트가 초기화 된 이후에 실행된다.
 - ngAfterContentChecked() : ngContent 디렉티브를 통해 부모로부터 HTML 조각을 받은 직후에 자식에서 실행된다. ngContent에 바인딩된 항목이 있으면, 이 항목의 값이 변경된 경우에도 실행된다.
 - ngAfterViewInit() : 컴포넌트 템플릿의 바인딩이 완료된 후에 실행된다. 부모 초기화되고, 자식이 초기화되서 자식 컴포넌트들이 모두 준비된 후에 실행된다.
 - ngAfterViewChecked() : 컴포넌트 템플릿에 바인딩된 항목의 값이 변경되면 실행된다. 컴포넌트 내부나 외부에서 발생한 변경 사항을 반영하기 위해 여러 번 호출될 수 있다.

이름에 Content가 들어간것은 <ng-content> 디렉티브를 사용하는 경우에만 실행된다.
View가 들어간 것은 컴포넌트 템플릿과 관련된 것이다.
Checked는 컴포넌트와 DOM이 동기화된 직후를 뜻한다.

생성자에 코드를 작성하지 말아야하는 경우
 - 생성자에서 컴포넌트의 프로퍼티를 사용해야 한다면, 이 함수는 모든 프로퍼티가 초기화되고 난 후인 ngOnInit()에서 실행해야한다.
 - 생성자 코드를 가볍게 유지하기 위해, 실행시간이 많이 걸리는 함수들은 ngOnInit()에서 실행하는 것이 좋다.

http://mng.bz/6huZ -- 생명주기 가로채기 설명


6.2.1 ngOnChanges()

뮤터블(mutable) vs 이뮤터블(immutable)

JavaScript 문자열 = immutable
----------------------
var greeting = "Hello";
greeting = "Hello Mary";
----------------------
Hello라는 문자열이 생성되고, 두번째 줄에서 Hello Mary라는 문자열이 새로 생성된다. 두 문자열은 모두 메모리에 있고, 각각은 immutable이다. greeting 변수의 입장에서는 참조만 바꾼 것이다.

JavaScript 객채 = mutable
메모리의 어떤 위치에 인스턴스가 생성되었다가 프로퍼티가 변경되면, 값이 직접 변경된다.
----------------------
var user = {name : "John"};
user.name = "Mary";
----------------------
여기서 Mary라는 문자열을 만들고, 다시 참조하지만 user 변수는 여전히 원래 참조하던 객체를 참조한다.