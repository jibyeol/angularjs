4.1.1 의존성 주입 패턴

const product = new Product();
createShipment(product);

product는 어딘가 생성되어서 createShipment로 반드시 전달되어야 한다.
createShipment() Product 객체와 의존성을 갖는다고 할 수 있다.
-- 객체를 생성하는 코드와 사용하는 코드를 다른 함수로 분리하는 것이 좋다.
객체가 바꾸면 바뀔때마다 코드를 수정해줘야한다.
 -> 의존성 주입 패턴이 생겨난 이유

"객체 A가 객체 B에 의존성이 있다"
객체 A는 객체 B가 어떻게 생겨나는지 신경쓰지 않고, 단지 객체 B를 받기만 한다.


4.1.2 제어권 역전 패턴

프레임워크가 객체를 만들고애플리케이션에 전달하는 방식
의존성 주입 패턴은 제어권 역전 패턴 중 하나이다.
Angular는 제어권을 갖는 주체로 동작하고 컴포넌트나 선언부에서 요구하는 객체를 직접 만들어서 전달


4.1.3 의존성 주입의 장점

Angular는 의존성으로 주입되는 객체를 미리 프로바이더에 등록하고, 필요할 때 인스턴스를 생성해서 제공하는 방식이다.
1. 코드의 결합을 낮출 수 있다.
2. 원하는 코드만 떼어내서 테스트할 수 있다.
3. 재사용하기 쉬운 코드를 작성할 수 있다.

[낮은 결합도와 재사용성]
 Angular에서는 의존성으로 주입될 객체를 가리킬 때 토큰을 사용하며, 토큰의 이름은 보통 주입될 객체의 타입으로 지정한다.
providers:[ProductService]
==
providers:[{provide:ProductService, useClass:ProductService}]
provide 프로퍼티에 토큰 이름과 같은 객체를 사용하지 않고 다른 객체나 고정된 값을 매핑할 수도 있는데, 다른 모듈이 개발되는 동안 임시로 대체할 때 활용될 수 있다.

[테스트 가용성]
provider에 Mock같은 다른 객체를 넣어서 테스트하면 된다.