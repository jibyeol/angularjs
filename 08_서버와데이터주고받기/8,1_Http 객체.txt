비동기 HTTP 요청은 비동기로 처리한다.
프로미스, 옵저버블로 구현할 수 있다.
프로미스는 요청을 취소할 수 없고, 성공이나 실패 모두 데이터 하나를 처리하며 연속적인 데이터를 처리하는 방법이 없다.

간단한 HTTP GET 요청을 보내는 방법은 다음과 같다
---------------------------------------
this.http.get('/products').subscribe();
---------------------------------------
서버에서 받은 데이터나 에러를 subscribe()에서 옵저버블 스트림으로 처리한다.

---------------------------------------
let myHeaders : Headers = new Headers();
myHeaders.append('Authorization', 'Basic QWxhZGRpb');

this.http
	.request(new Request({
		headers : myHeaders,
		method : RequestMethod.Get,
		url : '/products',
		search : 'zipcode=10001'
	}))
	.subscribe();
---------------------------------------

RequestOptionsArgs 객체를 사용할 수도 있다.
모든 항목은 ?가 붙어서 생략가능하다.

---------------------------------------
var myRequest : RequestOptionsArgs = {
	url : '/products',
	method : 'Get;
}
this.http
	.request(new Request(myRequest))
	.subscribe(...);
---------------------------------------
요청 쿼리 스트링을 붙여 보낼 때 사용한다.

[Fetch API]
XMLHttpRequest 객체를 대신 제안된 표준이다.
Fetch에서는 Request와 Response객체를 제네릭으로 정의해서 HTTP뿐 아니라 워커나 Cache API도 적용할 수 있다.
---------------------------------------
fetch('https://www.google.com/search?q=fetch+api') // url만 입력
	.then(response => response.text()) // 프로미스 반환. 성공한 경우는 Promise.resolve()로 전달됨
	.then(result => console.log(result)); // 받아온 데이터 처리
---------------------------------------
Angular에서는 옵저버블 기반의 Http 와 다르게, Fetch API는 프로미스 기반이다.
Angular의 Request나 Response, RequestOptionsArgs와 같은 클래스나 인터페이스들이 Fetch API의 개념을 바탕으로 만들어졌다.

