반응형 프로그래밍(Reactive Programming) : 옵저버블(Observables) 이벤트 스트림 구독(subscribe), 이 스트림에 반응하는 방식으로 동작

** 옵저버/옵저버블 패턴
Observable : 퍼블리셔
Observer : 구독자들
Observable에 이벤트 발생하면 Observer의 함수를 호출하여 통보

옵저버블 스트림을 지원하는 라이브러리 : RxJS
RxJS는 Angular 내부에 통합되어있음


5.2.1 옵저버와 옵저버블이 무엇인가?
옵저버블 : 연속된 데이터 스트림을 생성하는 객체.
 - cold observable : 구독자가 있는 경우에만 스트리밍 데이터를 만들기 시작
 - hot observable : 구독자가 없더라도 데이터를 스트리밍한다.
옵저버 : 이 스트림을 구독해서 사용하는 객체.

-------------------------
let mySubscription : Subscription = somObservable.subscribe(myObserver);
-------------------------
구독하려면 subscribe() 함수 사용!

-------------------------
mySubscription.unsubscribe();
-------------------------
구독을 멈추려면 unsubscribe() 함수 사용

옵저버블 : 소켓이나 배열, 화면에서 발생한 이벤트 등과 같은 데이터 소스를 한번에 하나씩, 연속으로 보내는(스트리밍, streaming) 객체.
 - 다음 엘리먼트 전달
 - 에러 전달
 - 스트리밍이 종료되었다는 신호 전달

옵저버
 - 다음 엘리먼트 받았을 때 처리하는 함수
 - 에러 받았을 때 처리하는 함수
 - 데이터 스트림이 끝났을 때 실행하는 함수

옵저버블 -> [ㅁㅁㅁㅁㅁ] -> [ㅇㅇㅇㅇㅇ] -> [ㅇㅇㅇ] -> 옵저버
                        map()          filter()
map()과 filer()를 사용해서 전달된 개별 엘리먼트를 조작할 수 있다.


5.2.2 옵저버블 이벤트 스트림

Event : 어디서 어떤 이벤트가 발생했는지 정보를 갖고 있음. 템플릿에서 이벤트를 바인딩할때 $event 인자를 전달하면 받을 수 있음

-------------------------
template : `<input (keyup)="onKey($event)">`
...
onKey(event : any) {
	console.log('You have entered ' + event.target.value);
}
-------------------------
여기서 value에 접근하려고 event.target을 사용했다.
target은 이벤트가 발생한 엘리먼트를 가리킨다.
하지만 Angular에서는 템플릿 지역변수를 사용해서 HTML 엘리먼트나 엘리먼트의 프로퍼티에 접근하는 것이 효율적이다!

-------------------------
template : `<input #mySearchField (keyup)="onKey(mySearchField.value)">`
...
onKey(value : string) {
	console.log('You have entered ' + value);
}
-------------------------
여기서 mySearchField라는 템플릿 지역 변수를 지정하고, 프로퍼티를 직접 전달하였다.
템플릿 지역변수는 #으로 시작하며, JavaScript에서는 # 기호 없이 사용할 수 있다.

JavaScript에서는 키를 누르거나 이벤트가 발생했을 때 한번만 처리한다.
Angular에서는 이벤트를 시간에 따라 연속적으로 발생하는 옵저버블 스트림으로 처리한다.

사용자가 APPL을 입력할때 총 4번 서버에 요청을 보낸다.
불필요한 요청을 안보내기 위해서 setTimeout()을 이용해서 딜레이를 준다.
옵저버 스트림은 FormControl클래스를 사용하는 폼 엘리먼트는 값이 변경되면 valueChanges 이벤트가 발생하는데 이 이벤트를 옵저버블 스트림으로 처리할 수 있다.

subscribe()함수 실행하기 전에 debounceTime()을 실행하는데, 이 함수는 스트림의 데이터가 발생하는 시점을 지연시킨다.
http://mng.bz/ZxZT -- RxJS
RxJS에서는 옵저버블 스트림에 사용할 수 있는 함수를 다양하게 제공
