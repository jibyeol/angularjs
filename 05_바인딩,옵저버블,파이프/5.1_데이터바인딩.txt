5.1 데이터 바인딩 : 애플리케이션의 데이터를 화면과 연결하는 기능

------------------------
<h1>Hello {{name}}!</h1>				<!--1-->
<span [hidden]="isValid">This field is required</span>	<!--2-->
<button (click)="placeBid()">Place Bid</button>		<!--3-->
------------------------
1: 변수의 값이나 표현식의 결과를 템플릿에 문자열로 표시한다. 컴포넌트에서 값이 바뀌면 자동으로 갱신됨.!
2: <span> 엘리먼트의 DOM 객체 프로퍼티와 컴포넌트 프로퍼티를 바인딩한다.
3: click 이벤트를 바인딩한다.

기본적으로 단방향!!
 - 컴포넌트 -> 화면
 - 화면 이벤트 -> 컴포넌트의 메소드
양방향 방인딩이면, 개발자가 작성할 코드는 줄지만 애플리케이션이 커지고 바인딩되는 객체가 많아질 수록 성능이 심각하게 나빠진다.


5.1.1 이벤트 바인딩 : 이벤트와 이벤트 핸들러를 연결하려면 컴포넌트의 템플릿에서 이벤트 이름을 괄호로 감싸는 문법 이용

------------------------
<button (click)="onClickEvent()">Get Products</button>		-- click -> onClickEvent()
<input placeholder="Product name" (input)="onInputEvent()">	-- input -> onInputEvent()
------------------------
이벤트가 발생하면 큰따옴표 안의 표현식이 다시 평가된다.
여기서는 함수이기 때문에 이 함수가 실행된다.
함수에 이벤트 객체를 넘길수도 있다! -- (input)="onInputEvent($event)" : $event를 이벤트 바인딩 대상이라고 함.


5.1.2 프로퍼티 바인딩, 어트리뷰트 바인딩 : HTML 엘리먼트는 태그에 어트리뷰트를 지정하는 방식으로 속성을 추가할 수 있다.

- HTML 문서 : 어트리뷰트가 지정된 태그로 구성되며, 어트리뷰트는 언제나 문자열이다.
- DOM 객체 : 브라우저는 HTML 엘리먼트를 DOM 객체로 만들고 이 DOM 객체를 웹 페이지에 렌더링한다. 프로퍼티의 값이 바뀌면 그때마다 페이지를 다시 렌더링한다.

[프로퍼티 바인딩]
------------------------
<input type="text" value="John" required>
------------------------
브라우저 : DOM 트리에 노드를 생성
JavaScript : HTMLInputElement

DOM 객체 = JavaScript 객체
 - HTMLInputElement 객체에는 DOMString 형식의 type과 value 프로퍼티가 있고 Boolean 형식의 required 프로퍼티가 있다.

p.231
Angular
	@Component({template : '<input [value]="greeting">'})
	class AppComponent{ greeting : string = 'A value'; }
브라우저
	DOM노드(JS부분)
		inputElement.value === 'A value';
렌더링된 화면
	Greeting : [A value] (input box)

[어트리뷰트 바인딩]
어트리뷰트 : HTML 문서에서 사용하는 용어(DOM에서는 사용하지 X)
------------------------
<input [attr.value]="greeting">
------------------------
바인딩 포현식에 attr.을 지정해야한다!

p.233
Angular
	@Component({template : '<input [attr.value]="greeting">'})
	class AppComponent{ greeting : string = 'A value'; }
브라우저
	DOM노드(JS부분)
		inputElement.value === 'A value'; -- HTML 엘리먼트로부터 반영됨
렌더링된 화면
	Greeting : [A value] (input box)
HTML 엘리먼트
	<input value="A value">

!! *** 정리
* 프로퍼티
template : '<input [value]="greeting">'
HTML element : <input> -- 위로부터 영향받지 않음
자바스크립트에 value값이 들어가면서 렌더링된 화면에 값이 출력됨!
화면상 값을 바꾸어도, 컴포넌트의 greeting 값은 변경되지 않음

* 애트리뷰트
template : '<input [attr.value]="greeting">'
HTML element : <input value="A value"> -- 위로부터 영향을 받음
컴포넌트에서 자바스크립트로 전달하지 않고, HTML element에서 자바스크립트로 영향을 주고, 그대로 렌더링됨.
역시 화면상 값을 바꾸어도, 컴포넌트의 greeting 값은 변경되지 않음


5.1.3 템플릿 바인딩
엘리먼트의 hidden 어트리뷰트나 display로 숨길 수 있지만 DOM 트리에는 남아있다.
Angular는 NgIf나 NgSwitch, NgFor와 같은 구조 디렉티브로 DOM 트리에 추가하거나 제거할 수 있다.

HTML의 <template> 태그는 스크립트를 실행해서 파싱하고 DOM 트리에 추가하지 않는다.
http://mzl.la/1OndeMV
--------------------------------
템플릿은 나중에 문서에서 사용하기 위해 저장되는 내용 조각으로 생각하십시오. 파서는 <template> 페이지를로드하는 동안 요소 의 내용을 처리하지만 해당 내용이 유효한지 만 확인합니다. 그러나 요소의 내용은 렌더링되지 않습니다.
--------------------------------
*ngIf, *ngFor와 같이 사용하고, Angular파서가 *(애스터리스크)로 시작하는 디렉티브를 만나면 브라우저가 이해할 수 있는 <template> 태그를 사용해서 이 디렉티브를 HTML 조각으로 변환한다.
Angular4.0부터는 <template>가 <ng-template>로 변경되어서 <template>를 사용하면 경고 메세지가 출력된다. 4.0이후 버전에 <ng-template>를 쓰자!


5.1.4 양방향 데이터 바인딩
뷰(화면)과 모델(컴포넌트 데이터)의 값이 각각 바뀌면 서로 영향을 주는 방식. 바로 동기화가 됨.

--------------------------------
<input (input)="onInputEvent($event)">
--------------------------------
이벤트 바인딩 = 화면 -> 컴포넌트 함수  === 단방향 바인딩

--------------------------------
<input [value]="myComponentProperty">
--------------------------------
프로퍼티 바인딩 = 컴포넌트 데이터 -> 화면 === 단방향 바인딩

--------------------------------
<input [value]="myComponentProperty"
	(input)="onInputEvent($event)">
--------------------------------
양방향 바인딩은 두가지 조합해서 사용

--------------------------------
<input [(ngModule)]="myComponentProperty">
--------------------------------
양방향 바인딩을 Angular에서 간단한 [()]표기법과 NgModel 디렉티브 제공
ControlValueAccessor 인터페이스에 의해 Angular 내부에서 이뤄지며, ControlValueAccessor는 커스텀 폼 컨트롤을 만들 때도 사용된다.

화면에 컨트롤이 많아지면 한 곳에서 값이 변경될 때 바인딩된 값들이 연쇄적으로 갱신되어서 성능이 급저하된다.
디버깅하기 어렵다.